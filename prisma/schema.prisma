generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  @@map(name: "users")

  id String @id @default(uuid()) @db.Uuid
  email String @unique
  password String
  phone String @unique
  nickname String @unique

  refresh_token String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Boards {
    @@map(name: "boards")

    id String @id @default(uuid()) @db.Uuid
    identifier_id String
    title String
    content String @db.Text
    category String
    nickname String
    board_score Int @default(0)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    deleted_at DateTime?

    reactions Reactions[]

}

enum ReactionType {
  LIKE
  DISLIKE
}

model Reactions {
  @@map(name: "reactions")

  id String @id @default(uuid()) @db.Uuid
  type ReactionType @default(LIKE)
  user_id String @db.Uuid

  board Boards @relation(fields: [board_id], references: [id])
  board_id String @db.Uuid

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Comments {
  @@map(name: "comments")

  id String @id @default(uuid()) @db.Uuid
  nickname String
  content String @db.Text

  board_id String @db.Uuid

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  replies Replies[]
}

model Replies {
  @@map(name: "repolies")

  id String @id @default(uuid()) @db.Uuid
  nickname String
  content String @db.Text

  comment Comments @relation(fields: [comment_id], references: [id])
  comment_id String @db.Uuid

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}

model Categories {
  @@map(name: "categories")

  id String @id @default(uuid()) @db.Uuid
  name String @unique

}

